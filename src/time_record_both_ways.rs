#[cfg(feature = "std")]
use std::vec::Vec;
#[cfg(not(feature = "std"))]
use alloc::vec::Vec;

use crate::error::{ManchesterError, MillerError};
use crate::manchester::ManchesterElementSet;
use crate::miller::MillerElementSet;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub(crate) struct EntryTimesBoth {
    pub(crate) first_len: u16,
    pub(crate) second_len: Option<u16>,
}

#[derive(Debug, Eq, PartialEq)]
pub struct SetTimesBoth<const TICK_LEN: u16> {
    time_both_set: Vec<EntryTimesBoth>,
}

impl<const TICK_LEN: u16> SetTimesBoth<TICK_LEN> {
    /// Assume here that long intervals are `on` (no modulation).
    pub fn from_raw(time_both_input: &[u16]) -> Vec<Self> {
        time_both_input
            .split(|interval| *interval > 15 * TICK_LEN)
            .filter(|interval| interval.len() % 2 == 1)
            .map(|slice| {
                let mut time_both_set: Vec<EntryTimesBoth> = Vec::new();
                let slice_len = slice.len();
                for i in 0..slice_len / 2 {
                    time_both_set.push(EntryTimesBoth {
                        first_len: slice[2 * i],
                        second_len: Some(slice[2 * i + 1]),
                    })
                }
                time_both_set.push(EntryTimesBoth {
                    first_len: slice[slice_len - 1],
                    second_len: None,
                });
                SetTimesBoth::<TICK_LEN> { time_both_set }
            })
            .collect()
    }

    pub fn convert_to_miller(&self) -> Result<MillerElementSet, MillerError> {
        let mut miller_element_set = MillerElementSet::new();
        for time_both in self.time_both_set.iter() {
            miller_element_set.add_time_both_interval::<TICK_LEN>(*time_both)?;
        }
        Ok(miller_element_set)
    }

    pub fn convert_to_manchester(&self) -> Result<ManchesterElementSet, ManchesterError> {
        let mut manchester_element_set = ManchesterElementSet::new();
        for time_both in self.time_both_set.iter() {
            manchester_element_set.add_time_both_interval::<TICK_LEN>(*time_both)?;
        }
        Ok(manchester_element_set)
    }
}

#[cfg(feature = "std")]
#[cfg(test)]
mod tests {
    use super::*;
    use crate::frame::{Frame, FrameAttributed};

    fn check_many_frames<const N: u16>(times_set: &[u16], expected_frame_set: &[FrameAttributed]) {
        let times_both = SetTimesBoth::<N>::from_raw(times_set);
        let mut frame_set: Vec<FrameAttributed> = Vec::new();
        for chunk in times_both.iter() {
            if let Ok(miller_element_set) = chunk.convert_to_miller() {
                if let Ok(frame) = miller_element_set.collect_frame() {
                    frame_set.push(FrameAttributed::Miller(frame))
                } else if let Ok(manchester_element_set) = chunk.convert_to_manchester() {
                    if let Ok(frame) = manchester_element_set.collect_frame() {
                        frame_set.push(FrameAttributed::Manchester(frame))
                    }
                }
            } else if let Ok(manchester_element_set) = chunk.convert_to_manchester() {
                if let Ok(frame) = manchester_element_set.collect_frame() {
                    frame_set.push(FrameAttributed::Manchester(frame))
                }
            }
        }
        assert_eq!(frame_set, expected_frame_set);
    }

    #[test]
    fn check_many_frames_test1() {
        let times_set = [
            25001, 82, 101, 75, 191, 80, 102, 75, 191, 79, 189, 80, 189, 80, 1734, 176, 173, 188,
            92, 94, 82, 97, 83, 97, 162, 187, 171, 189, 93, 92, 85, 97, 82, 95, 82, 96, 81, 96, 83,
            97, 85, 95, 163, 375, 9536, 82, 101, 75, 103, 75, 104, 75, 104, 75, 190, 80, 279, 81,
            278, 81, 188, 81, 101, 75, 104, 74, 104, 74, 104, 76, 103, 75, 104, 74, 192, 80, 101,
            75, 104, 74, 104, 75, 280, 81, 278, 82, 188, 80, 190, 79, 277, 82, 101, 75, 191, 98,
            81, 99, 81, 98, 163, 185, 90, 98, 80, 100, 80, 98, 79, 99, 81, 98, 162, 108, 78, 180,
            172, 187, 172, 187, 90, 98, 80, 99, 80, 99, 79, 99, 78, 100, 80, 99, 162, 108, 78, 178,
            174, 108, 78, 98, 82, 178, 172, 109, 77, 179, 93, 96, 79, 99, 163, 107, 79, 179, 172,
            188, 89, 98, 81, 345, 58364, 72, 110, 68, 198, 71, 198, 71, 198, 71, 109, 68, 289, 71,
            110, 68, 111, 68, 110, 68, 111, 68, 198, 71, 198, 71, 109, 69, 198, 71, 198, 71, 110,
            68, 110, 68, 199, 71, 110, 68, 199, 70, 110, 68, 199, 71, 1737, 98, 81, 98, 78, 179,
            91, 98, 80, 99, 164, 184, 176, 104, 81, 98, 80, 99, 78, 99, 81, 99, 81, 176, 176, 104,
            81, 176, 176, 183, 176, 105, 79, 178, 92, 98, 79, 99, 165, 105, 79, 99, 81, 301, 63087,
            71, 110, 68, 199, 70, 199, 70, 199, 69, 111, 68, 289, 70, 111, 67, 112, 67, 111, 67,
            112, 67, 199, 70, 199, 70, 111, 67, 199, 70, 199, 70, 111, 67, 111, 68, 199, 70, 111,
            67, 199, 70, 111, 67, 200, 69, 1741, 98, 80, 98, 80, 177, 92, 99, 79, 99, 165, 183,
            176, 104, 80, 99, 80, 98, 80, 98, 81, 98, 79, 179, 177, 102, 80, 177, 177, 182, 178,
            104, 80, 176, 93, 98, 80, 98, 166, 103, 80, 99, 81, 285, 9712, 70, 112, 66, 200, 69,
            200, 69, 200, 69, 111, 67, 290, 69, 112, 67, 111, 67, 112, 67, 111, 67, 200, 69, 200,
            69, 111, 67, 200, 69, 200, 69, 112, 67, 111, 67, 200, 69, 111, 67, 200, 69, 112, 67,
            199, 70, 1738, 99, 80, 98, 81, 176, 93, 97, 80, 99, 166, 181, 176, 105, 79, 99, 81, 98,
            80, 97, 81, 99, 81, 176, 177, 103, 80, 177, 178, 181, 176, 105, 80, 177, 92, 98, 81,
            97, 167, 102, 81, 98, 81, 260, 64306, 70, 111, 67, 200, 69, 200, 69, 200, 69, 111, 67,
            290, 69, 112, 67, 112, 66, 112, 67, 112, 66, 200, 69, 200, 69, 112, 67, 199, 69, 200,
            69, 112, 67, 111, 67, 200, 69, 111, 67, 200, 69, 112, 67, 200, 69, 1738, 98, 80, 98,
            81, 176, 94, 97, 81, 98, 165, 181, 179, 102, 80, 99, 80, 98, 82, 97, 80, 98, 82, 175,
            179, 102, 81, 176, 178, 180, 180, 102, 80, 176, 93, 98, 80, 98, 167, 102, 81, 98, 80,
            261, 6517, 69, 112, 66, 200, 69, 200, 69, 200, 69, 111, 67, 290, 69, 112, 67, 112, 66,
            112, 67, 112, 66, 200, 69, 200, 69, 112, 67, 199, 69, 200, 69, 112, 67, 111, 67, 200,
            69, 111, 67, 200, 69, 112, 67, 200, 69, 1739, 98, 81, 97, 83, 174, 94, 96, 83, 97, 167,
            179, 180, 101, 82, 97, 81, 97, 81, 98, 80, 98, 82, 175, 181, 101, 80, 175, 181, 179,
            179, 102, 81, 176, 93, 96, 81, 98, 167, 103, 80, 98, 81, 246, 10042, 69, 112, 67, 199,
            70, 199, 69, 200, 69, 112, 66, 290, 70, 111, 67, 112, 67, 111, 67, 112, 67, 200, 68,
            200, 69, 112, 67, 200, 69, 199, 69, 112, 67, 111, 67, 200, 69, 112, 67, 200, 68, 112,
            67, 200, 69, 1740, 97, 82, 97, 82, 174, 94, 97, 83, 96, 167, 180, 179, 102, 80, 98, 80,
            98, 81, 98, 81, 98, 81, 175, 179, 102, 82, 175, 180, 179, 179, 102, 81, 175, 94, 97,
            80, 98, 167, 102, 81, 97, 82, 253, 22144, 69, 112, 67, 200, 69, 199, 69, 200, 69, 112,
            66, 290, 70, 111, 67, 112, 67, 111, 67, 112, 67, 200, 69, 199, 69, 112, 67, 200, 69,
            200, 68, 112, 67, 112, 66, 200, 69, 112, 67, 200, 69, 111, 67, 200, 69, 1740, 97, 82,
            97, 80, 176, 94, 96, 82, 98, 167, 180, 179, 102, 81, 97, 81, 98, 81, 97, 81, 98, 81,
            176, 178, 102, 82, 175, 179, 181, 178, 102, 80, 177, 93, 98, 80, 98, 167, 101, 82, 97,
            82, 256, 28703, 69, 112, 67, 200, 69, 199, 69, 200, 69, 112, 67, 289, 70, 111, 67, 112,
            67, 112, 66, 112, 67, 200, 69, 200, 69, 111, 67, 200, 69, 199, 70, 111, 67, 112, 66,
            201, 69, 111, 67, 200, 69, 111, 67, 200, 69, 1741, 96, 81, 97, 82, 175, 94, 97, 82, 97,
            167, 180, 179, 103, 80, 97, 82, 97, 80, 98, 81, 98, 81, 176, 179, 102, 80, 176, 179,
            180, 179, 102, 81, 176, 93, 97, 82, 96, 168, 102, 81, 97, 81, 252, 21500, 70, 111, 67,
            200, 69, 200, 69, 199, 70, 111, 67, 290, 69, 112, 67, 111, 67, 112, 67, 111, 67, 200,
            69, 200, 69, 111, 67, 200, 69, 200, 69, 111, 67, 112, 67, 200, 69, 111, 67, 200, 69,
            112, 66, 200, 69, 1741, 97, 81, 97, 83, 174, 93, 97, 83, 96, 167, 180, 179, 102, 81,
            97, 83, 96, 81, 97, 81, 97, 83, 175, 180, 101, 81, 175, 180, 179, 179, 101, 82, 176,
            93, 96, 82, 98, 167, 101, 82, 97, 81, 260, 22065, 69, 111, 67, 200, 69, 200, 69, 200,
            69, 111, 67, 290, 70, 111, 67, 112, 67, 111, 67, 112, 67, 199, 70, 199, 69, 112, 67,
            200, 69, 200, 69, 111, 67, 112, 67, 199, 69, 112, 67, 200, 69, 111, 67, 200, 69, 1739,
            98, 82, 97, 81, 176, 94, 96, 81, 98, 167, 179, 181, 101, 81, 97, 81, 98, 79, 99, 81,
            98, 81, 175, 179, 102, 82, 175, 179, 179, 180, 102, 81, 176, 93, 97, 81, 99, 166, 101,
            81, 98, 80, 255, 522, 70, 111, 67, 200, 69, 200, 69, 200, 69, 111, 67, 290, 69, 112,
            67, 111, 67, 112, 67, 111, 67, 200, 69, 200, 69, 112, 66, 200, 69, 200, 69, 112, 67,
            111, 67, 200, 69, 112, 66, 200, 69, 112, 67, 200, 69, 1739, 96, 81, 99, 81, 175, 94,
            97, 80, 98, 166, 181, 179, 102, 80, 98, 81, 98, 81, 99, 80, 97, 81, 176, 180, 101, 81,
            175, 179, 181, 178, 102, 82, 174, 93, 98, 82, 97, 167, 102, 81, 97, 82, 263, 61777, 97,
            88, 83, 182, 91, 176, 93, 177, 92, 91, 83, 271, 94, 89, 83, 95, 84, 95, 83, 95, 84,
            182, 89, 180, 91, 90, 85, 181, 93, 175, 91, 90, 87, 93, 85, 181, 92, 89, 85, 181, 93,
            88, 86, 181, 91, 1714, 94, 83, 97, 80, 179, 92, 95, 81, 97, 163, 186, 173, 106, 78, 98,
            80, 98, 80, 98, 81, 98, 81, 179, 173, 107, 79, 178, 174, 187, 172, 107, 77, 180, 93,
            94, 81, 98, 163, 108, 78, 98, 83, 526,
        ];
        let expected_frame_set = [
            FrameAttributed::Miller(Frame::Short(0x26)),
            FrameAttributed::Miller(Frame::Standard(vec![0xB2])),
            FrameAttributed::Miller(Frame::Standard(vec![0xB2])),
            FrameAttributed::Manchester(Frame::Standard(vec![0xA3])),
            FrameAttributed::Miller(Frame::Standard(vec![0xB2])),
            FrameAttributed::Manchester(Frame::Standard(vec![0xA3])),
            FrameAttributed::Miller(Frame::Standard(vec![0xB2])),
            FrameAttributed::Manchester(Frame::Standard(vec![0xA3])),
            FrameAttributed::Miller(Frame::Standard(vec![0xB2])),
            FrameAttributed::Manchester(Frame::Standard(vec![0xA3])),
            FrameAttributed::Miller(Frame::Standard(vec![0xB2])),
            FrameAttributed::Manchester(Frame::Standard(vec![0xA3])),
            FrameAttributed::Miller(Frame::Standard(vec![0xB2])),
            FrameAttributed::Manchester(Frame::Standard(vec![0xA3])),
            FrameAttributed::Miller(Frame::Standard(vec![0xB2])),
            FrameAttributed::Manchester(Frame::Standard(vec![0xA3])),
            FrameAttributed::Miller(Frame::Standard(vec![0xB2])),
            FrameAttributed::Manchester(Frame::Standard(vec![0xA3])),
            FrameAttributed::Miller(Frame::Standard(vec![0xB2])),
            FrameAttributed::Manchester(Frame::Standard(vec![0xA3])),
            FrameAttributed::Miller(Frame::Standard(vec![0xB2])),
            FrameAttributed::Manchester(Frame::Standard(vec![0xA3])),
            FrameAttributed::Miller(Frame::Standard(vec![0xB2])),
        ];
        check_many_frames::<22u16>(&times_set, &expected_frame_set);
    }

    #[test]
    fn check_many_frames_test2() {
        let times_set = [
            47632, 1039, 36752, 99, 32448, 74, 26, 56, 34, 53, 35, 53, 36, 52, 36, 52, 36, 53, 36,
            52, 35, 53, 36, 52, 36, 52, 36, 53, 36, 52, 36, 52, 36, 53, 36, 52, 35, 53, 36, 53, 35,
            52, 36, 53, 36, 53, 35, 52, 36, 53, 35, 53, 36, 52, 36, 52, 36, 53, 35, 53, 36, 52, 36,
            52, 36, 52, 36, 53, 36, 52, 36, 53, 35, 53, 36, 52, 36, 52, 36, 53, 36, 52, 36, 52, 36,
            53, 35, 52, 36, 52, 36, 53, 36, 52, 36, 53, 35, 53, 35, 53, 74, 95, 85, 62, 31, 88, 50,
            46, 77, 95, 48, 47, 76, 96, 48, 47, 77, 63, 30, 88, 86, 94, 48, 48, 75, 96, 48, 47, 76,
            96, 84, 62, 31, 54, 35, 88, 85, 94, 85, 94, 48, 47, 38, 52, 37, 52, 35, 54, 35, 52, 36,
            53, 35, 53, 36, 53, 36, 51, 74, 64, 30, 55, 35, 87, 50, 46, 76, 65, 30, 54, 35, 53, 35,
            53, 35, 54, 35, 87, 86, 61, 31, 55, 35, 52, 36, 53, 36, 52, 36, 53, 35, 52, 36, 53, 36,
            86, 50, 47, 76, 64, 30, 88, 50, 47, 76, 64, 30, 88, 86, 94, 85, 61, 32, 54, 34, 54, 35,
            53, 36, 52, 37, 86, 50, 46, 77, 63, 31, 54, 34, 54, 35, 87, 51, 45, 77, 95, 48, 48, 76,
            95, 48, 47, 39, 52, 73, 96, 48, 48, 38, 51, 37, 52, 35, 54, 73, 64, 30, 55, 35, 52, 36,
            53, 35, 87, 51, 46, 76, 95, 49, 47, 38, 52, 37, 51, 36, 53, 73, 64, 30, 89, 50, 46, 77,
            95, 84, 62, 32, 87, 50, 47, 39, 51, 37, 52, 35, 53, 36, 53, 35, 52, 36, 53, 35, 53, 36,
            52, 36, 52, 36, 53, 36, 52, 36, 53, 35, 52, 36, 53, 36, 52, 35, 54, 35, 53, 35, 53, 35,
            53, 36, 52, 36, 53, 36, 52, 35, 53, 37, 51, 75, 63, 30, 88, 51, 46, 76, 95, 49, 47, 76,
            95, 49, 47, 38, 52, 74, 64, 30, 88, 50, 46, 77, 63, 31, 88, 50, 46, 77, 64, 31, 87, 50,
            46, 77, 64, 30, 88, 86, 61, 31, 89, 86, 93, 49, 47, 38, 52, 37, 52, 35, 53, 36, 53, 35,
            52, 74, 96, 47, 48, 38, 52, 37, 52, 35, 53, 36, 53, 35, 53, 74, 95, 48, 47, 39, 51, 74,
            96, 48, 47, 76, 95, 49, 47, 38, 52, 37, 51, 36, 53, 36, 52, 35, 54, 73, 95, 48, 48, 39,
            51, 37, 51, 36, 53, 36, 52, 35, 54, 73, 95, 48, 48, 39, 51, 37, 51, 36, 53, 36, 52, 74,
            64, 30, 54, 35, 54, 35, 52, 36, 52, 36, 53, 36, 52, 36, 52, 36, 53, 36, 51, 36, 87, 50,
            47, 39, 51, 37, 51, 37, 52, 36, 52, 74, 64, 30, 88, 50, 46, 40, 51, 36, 53, 36, 52, 36,
            52, 74, 95, 48, 48, 39, 51, 36, 52, 36, 53, 36, 52, 36, 52, 37, 52, 35, 53, 35, 53, 36,
            52, 36, 53, 36, 52, 35, 53, 36, 52, 74, 65, 29, 89, 49, 47, 39, 52, 36, 52, 35, 53, 74,
            95, 48, 48, 38, 52, 36, 52, 37, 51, 36, 53, 36, 52, 36, 52, 36, 52, 74, 96, 84, 62, 31,
            88, 50, 46, 77, 96, 48, 46, 39, 52, 36, 52, 37, 51, 36, 53, 35, 53, 74, 63, 31, 55, 34,
            87, 51, 45, 40, 51, 37, 51, 36, 53, 36, 52, 36, 53, 73, 96, 48, 47, 39, 51, 37, 52, 35,
            53, 36, 52, 74, 64, 30, 55, 35, 86, 86, 62, 32, 54, 34, 88, 49, 47, 76, 64, 31, 54, 35,
            86, 86, 62, 32, 54, 35, 52, 37, 52, 35, 53, 691, 1195, 24895, 74, 108, 70, 196, 73,
            108, 70, 196, 74, 195, 73, 196, 73, 1748, 168, 183, 183, 98, 83, 93, 88, 91, 86, 175,
            180, 178, 182, 95, 85, 93, 87, 92, 87, 89, 89, 91, 89, 91, 86, 92, 87, 174, 314, 9589,
            75, 107, 70, 109, 69, 109, 70, 109, 70, 196, 73, 285, 74, 285, 75, 195, 73, 108, 70,
            108, 70, 109, 70, 108, 70, 109, 70, 109, 69, 197, 73, 108, 69, 109, 70, 109, 69, 286,
            75, 285, 74, 195, 73, 196, 73, 285, 74, 107, 71, 196, 73, 196, 73, 108, 70, 196, 73,
            31491, 74, 108, 70, 197, 72, 197, 73, 195, 73, 285, 74, 1839, 166, 184, 182, 97, 85,
            92, 87, 92, 87, 174, 87, 89, 90, 87, 92, 88, 90, 170, 105, 79, 174, 180, 105, 79, 93,
            87, 172, 181, 103, 82, 170, 100, 88, 90, 89, 171, 105, 81, 170, 182, 182, 98, 86, 88,
            278, 17272, 72, 110, 68, 198, 71, 198, 71, 198, 70, 110, 68, 289, 71, 110, 68, 111, 67,
            111, 68, 111, 67, 200, 70, 198, 71, 109, 69, 198, 71, 198, 71, 110, 68, 110, 68, 199,
            70, 110, 68, 199, 71, 110, 68, 198, 71, 1741, 98, 81, 97, 80, 176, 93, 98, 81, 98, 164,
            184, 175, 105, 80, 98, 80, 99, 81, 97, 81, 98, 81, 175, 177, 105, 79, 179, 175, 183,
            176, 105, 80, 176, 92, 98, 81, 98, 165, 103, 82, 98, 81, 292, 34859, 71, 110, 68, 199,
            70, 199, 69, 199, 70, 111, 67, 289, 71, 110, 68, 111, 67, 111, 68, 111, 67, 199, 70,
            199, 70, 110, 68, 199, 70, 199, 70, 111, 67, 111, 68, 199, 70, 110, 68, 199, 70, 111,
            67, 199, 70, 1741, 98, 80, 99, 81, 175, 94, 97, 81, 98, 165, 181, 178, 104, 78, 100,
            80, 97, 83, 97, 81, 97, 80, 176, 178, 104, 80, 175, 178, 183, 176, 105, 80, 176, 93,
            98, 83, 96, 165, 103, 80, 97, 82, 284, 26179, 70, 111, 67, 200, 69, 199, 70, 199, 70,
            111, 67, 289, 70, 111, 67, 112, 67, 111, 67, 112, 67, 199, 70, 199, 70, 111, 67, 199,
            70, 199, 70, 111, 67, 111, 68, 199, 70, 110, 68, 199, 70, 111, 67, 199, 70, 1743, 97,
            80, 98, 81, 176, 92, 98, 81, 98, 166, 179, 180, 103, 80, 98, 81, 98, 81, 98, 80, 98,
            81, 175, 181, 101, 80, 176, 178, 180, 179, 103, 81, 175, 90, 100, 83, 97, 165, 104, 80,
            98, 81, 275, 21954,
        ];
        let expected_frame_set = [
            FrameAttributed::Miller(Frame::Short(0x26)),
            FrameAttributed::Miller(Frame::Standard(vec![0x50, 0x00])),
            FrameAttributed::Miller(Frame::Standard(vec![0xB2])),
            FrameAttributed::Miller(Frame::Standard(vec![0xB2])),
            FrameAttributed::Manchester(Frame::Standard(vec![0xA3])),
            FrameAttributed::Miller(Frame::Standard(vec![0xB2])),
            FrameAttributed::Manchester(Frame::Standard(vec![0xA3])),
        ];
        check_many_frames::<22u16>(&times_set, &expected_frame_set);
    }
}
